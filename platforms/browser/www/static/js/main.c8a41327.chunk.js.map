{"version":3,"sources":["Images/logo.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","margin","spacing","width","height","flex","flexGrow","LogoBig","src","logo","className","alt","MainMenu","classes","Button","variant","color","App","AppBar","position","Toolbar","IconButton","edge","aria-label","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","startApp","navigator","serviceWorker","ready","then","registration","unregister","cordova","addEventListener"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,kC,mPCarCC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJ,QAAS,CACPC,OAAQF,EAAMG,QAAQ,GACzBC,MAAO,QACPC,OAAQ,SAETC,KAAM,CACJC,SAAU,QAKd,SAASC,IACR,OACC,6BACC,yBAAKC,IAAKC,IAAMC,UAAU,WAAWC,IAAI,SACzC,2CAKH,SAASC,IACR,IAAMC,EAAUhB,IAChB,OACC,yBAAKa,UAAWG,EAAQb,MACvB,kBAACc,EAAA,EAAD,CAAQC,QAAQ,WAAWL,UAAU,cAAcM,MAAM,WAAzD,WAGA,kBAACF,EAAA,EAAD,CAAQC,QAAQ,WAAWL,UAAU,cAAcM,MAAM,WAAzD,WAyBYC,MAlBf,WACC,OACC,yBAAKP,UAAU,OACd,kBAACQ,EAAA,EAAD,CAAQC,SAAS,UAChB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQN,MAAM,UAAUO,aAAW,QACrD,kBAAC,IAAD,SAIF,4BAAQb,UAAU,cACjB,kBAACH,EAAD,MACA,kBAACK,EAAD,SCjDgBY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SAEjD,IAAMC,EAAW,WAChBJ,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDwHrB,kBAAmBE,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iBClHfd,OAAOe,QAGTT,SAASU,iBAAiB,cAAeR,GAAU,GAFnDA,M","file":"static/js/main.c8a41327.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.fe8f85f0.png\";","import React from 'react';\nimport logo from './Images/logo.png';\nimport Button from '@material-ui/core/Button';\nimport AppBar from '@material-ui/core/AppBar';\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport NotificationsIcon from '@material-ui/icons/Notifications'\nimport Box from '@material-ui/core/Box';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(2),\n\t  width: '130px',\n\t  height: '130px'\n    },\n  flex: {\n    flexGrow: 1,\n  }\n  },\n}));\n\nfunction LogoBig() {\n\treturn (\n\t\t<div>\n\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\t\t\t<h1>HairCutter</h1>\n\t\t</div>\n\t);\n}\n\nfunction MainMenu(){\n\tconst classes = useStyles();\n\treturn (\n\t\t<div className={classes.root}>\n\t\t\t<Button variant=\"outlined\" className=\"Main-button\" color=\"primary\">\n\t\t\t\tHistory\n\t\t\t</Button>\n\t\t\t<Button variant=\"outlined\" className=\"Main-button\" color=\"primary\">\n\t\t\t\tInvite\n\t\t\t</Button>\t\t\t\n\t\t</div>\n\t);\n}\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<AppBar position=\"static\">\n\t\t\t\t<Toolbar>\n\t\t\t\t  <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n\t\t\t\t\t<MenuIcon />\n\t\t\t\t  </IconButton>\n\t\t\t\t</Toolbar>\n\t\t\t</AppBar>\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<LogoBig></LogoBig>\n\t\t\t\t<MainMenu></MainMenu>\n\t\t\t</header>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nconst startApp = () => {\n\tReactDOM.render(\n\t  <App />,\n\t  document.getElementById('root')\n\t);\n\t// If you want your app to work offline and load faster, you can change\n\t// unregister() to register() below. Note this comes with some pitfalls.\n\t// Learn more about service workers: https://bit.ly/CRA-PWA\n\tserviceWorker.unregister();\n}\n\nif(!window.cordova) {\n  startApp()\n} else {\n  document.addEventListener('deviceready', startApp, false)\n}"],"sourceRoot":""}